// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineMarketPlace.Areas.Identity.Data;

namespace OnlineMarketPlace.Migrations
{
    [DbContext(typeof(OnlineMarketContext))]
    [Migration("20190918074446_P-Features-01")]
    partial class PFeatures01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OnlineMarket.Models.AdditionalFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<byte[]>("Image");

                    b.Property<string>("ImageIcon");

                    b.Property<string>("ImagePath");

                    b.Property<string>("LatinName");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<DateTime>("RegDateTime");

                    b.Property<bool>("Status");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("AdditionalFeatures");
                });

            modelBuilder.Entity("OnlineMarket.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId");

                    b.Property<string>("Fax");

                    b.Property<DateTime?>("ModifyDateTime");

                    b.Property<string>("Phone");

                    b.Property<string>("PostalCode");

                    b.Property<int?>("ProvinceId");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserAddress");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("OnlineMarket.Models.AdminMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("IconPath");

                    b.Property<string>("ImagePath");

                    b.Property<string>("LatinTitle");

                    b.Property<string>("Link");

                    b.Property<int?>("ParentId");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.Property<string>("UserRoleId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("AdminMenu");
                });

            modelBuilder.Entity("OnlineMarket.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentHtml");

                    b.Property<int?>("CountOfVisit");

                    b.Property<string>("LatinTitle");

                    b.Property<string>("Link");

                    b.Property<byte[]>("MainImage");

                    b.Property<string>("MainImagePath");

                    b.Property<int?>("Rank");

                    b.Property<int?>("RelatedPhotoGalleryId");

                    b.Property<int?>("RelatedProductId");

                    b.Property<string>("Source");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("StyleCss");

                    b.Property<int?>("SubjectId");

                    b.Property<string>("Summery");

                    b.Property<string>("Tags");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.Property<string>("Writer");

                    b.Property<DateTime>("WrittenDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("RelatedPhotoGalleryId");

                    b.HasIndex("RelatedProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("OnlineMarket.Models.ArticleModified", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId");

                    b.Property<string>("Comment");

                    b.Property<string>("LastArticleBackupJson");

                    b.Property<DateTime>("ModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleModified");
                });

            modelBuilder.Entity("OnlineMarket.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image");

                    b.Property<string>("ImagePath");

                    b.Property<string>("LatinName");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("OnlineMarket.Models.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int?>("BankId");

                    b.Property<string>("CardNo");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("OnlineService")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Posset");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ShebaNo");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("OnlineMarket.Models.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("AltName");

                    b.Property<bool>("Animated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ButtonContent");

                    b.Property<string>("ButtonLink");

                    b.Property<double?>("ByteSize");

                    b.Property<string>("CollectionName");

                    b.Property<int?>("ConnectedBrandId");

                    b.Property<int?>("ConnectedCategoryId");

                    b.Property<int?>("ConnectedProductId");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExpireDateTime");

                    b.Property<string>("Format");

                    b.Property<bool?>("GrayScaleOn");

                    b.Property<bool>("HasButton")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<double?>("Height");

                    b.Property<byte[]>("Image");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Link");

                    b.Property<string>("Position");

                    b.Property<int?>("Priority");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("ScreenResulotionId");

                    b.Property<bool>("SetForFuture")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ShowDateTime");

                    b.Property<int?>("ShowInPageId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Summery");

                    b.Property<string>("ThumbnailImagePath");

                    b.Property<string>("Title");

                    b.Property<int?>("TypeId");

                    b.Property<string>("UserId");

                    b.Property<double?>("Width");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedBrandId");

                    b.HasIndex("ConnectedCategoryId");

                    b.HasIndex("ConnectedProductId");

                    b.HasIndex("ShowInPageId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("OnlineMarket.Models.BlockedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AutoBlock");

                    b.Property<bool?>("Block");

                    b.Property<string>("ByUserId");

                    b.Property<int?>("LoginFailureId");

                    b.Property<string>("Reason");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int?>("UserLogId");

                    b.HasKey("Id");

                    b.HasIndex("ByUserId");

                    b.HasIndex("LoginFailureId");

                    b.HasIndex("UserLogId");

                    b.ToTable("BlockedUser");
                });

            modelBuilder.Entity("OnlineMarket.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int?>("CityId");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("LogoPath");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("SellerId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("SubDomain");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("SellerId");

                    b.HasIndex("UserId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("OnlineMarket.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Catalog");

                    b.Property<int?>("CountryId");

                    b.Property<string>("Description");

                    b.Property<string>("LatinName");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("OnlineMarket.Models.BrandModified", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId");

                    b.Property<string>("Comment");

                    b.Property<string>("LastBrandBackupJson");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("UserId");

                    b.ToTable("BrandModified");
                });

            modelBuilder.Entity("OnlineMarket.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AliasName");

                    b.Property<string>("ConnectedLink");

                    b.Property<string>("Description");

                    b.Property<int?>("FieldId");

                    b.Property<byte[]>("Image1");

                    b.Property<byte[]>("ImageForMenu");

                    b.Property<string>("ImageForMenuPath");

                    b.Property<string>("ImageIcon");

                    b.Property<string>("ImagePath");

                    b.Property<string>("LatinName");

                    b.Property<string>("Name");

                    b.Property<int?>("OrderedCount");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("Priority");

                    b.Property<DateTime>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("ShowInFooter")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowInMainPage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowInMenu")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Tags");

                    b.Property<string>("TitleAltName");

                    b.Property<int?>("TotalVisit");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("OnlineMarket.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CallingCode");

                    b.Property<string>("Coordinates");

                    b.Property<byte[]>("Flag");

                    b.Property<byte[]>("Image");

                    b.Property<string>("LatinName");

                    b.Property<byte[]>("Map");

                    b.Property<string>("Name");

                    b.Property<int?>("ProvinceId");

                    b.Property<string>("RangeIp");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("OnlineMarket.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorLatinName");

                    b.Property<string>("ColorName");

                    b.Property<string>("HexCode");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Rgba");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("OnlineMarket.Models.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<string>("ApprovedByUserId");

                    b.Property<string>("Comment");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegdDateTime");

                    b.Property<bool>("Status");

                    b.Property<string>("Tags");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("OnlineMarket.Models.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color");

                    b.Property<string>("Coordinates");

                    b.Property<byte[]>("Flag");

                    b.Property<string>("LatinName");

                    b.Property<byte[]>("Map");

                    b.Property<string>("Name");

                    b.Property<long?>("Population");

                    b.Property<string>("RangeIp");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("Continent");
                });

            modelBuilder.Entity("OnlineMarket.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CallingCode");

                    b.Property<string>("Capital");

                    b.Property<string>("Comment");

                    b.Property<int?>("ContinentId");

                    b.Property<string>("Coordinates");

                    b.Property<string>("CountryAlphaCode");

                    b.Property<string>("Currency");

                    b.Property<byte[]>("Emblem");

                    b.Property<byte[]>("Flag");

                    b.Property<string>("Gdp");

                    b.Property<string>("InternetTld");

                    b.Property<string>("LatinName");

                    b.Property<byte[]>("Map");

                    b.Property<string>("Motto");

                    b.Property<string>("Name");

                    b.Property<string>("OfficialLanguageFirst");

                    b.Property<string>("OfficialLanguageSecond");

                    b.Property<float?>("Population");

                    b.Property<string>("RangeIp");

                    b.Property<string>("Religion");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("TimeZone");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("OnlineMarket.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApplyOnAllGroups")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("ApplyOnTag")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ApprovedByUserId");

                    b.Property<DateTime?>("ApprovedDateTime");

                    b.Property<bool>("AutoIndex")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("AutoSet")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("CouponCode");

                    b.Property<bool>("ForSpecialUser")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("ForSpecialUsers")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("GeneratedCode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("LatinName");

                    b.Property<bool>("MultiProducts")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name");

                    b.Property<string>("PolicyJson");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("SpecialUserId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("SpecialUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("OnlineMarket.Models.CouponIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoClear")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("CouponId");

                    b.Property<double?>("DiscountAmount");

                    b.Property<DateTime?>("ExpireDateTime");

                    b.Property<decimal?>("NewPrice")
                        .HasColumnType("Money");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("Money");

                    b.Property<int?>("ProductId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("ProductId");

                    b.ToTable("CouponIndex");
                });

            modelBuilder.Entity("OnlineMarket.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LatinName");

                    b.Property<string>("Name");

                    b.Property<decimal?>("RatioPrice")
                        .HasColumnType("Money");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Symbol");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("OnlineMarket.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image");

                    b.Property<string>("ImagePath");

                    b.Property<string>("LatinName");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Tags");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("OnlineMarket.Models.GeneralPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AliasTitle");

                    b.Property<string>("ContentHtml");

                    b.Property<string>("Description");

                    b.Property<string>("ImageIconPath");

                    b.Property<string>("LatinTitle");

                    b.Property<string>("Links");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaTagJson");

                    b.Property<DateTime>("RegdDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("RelatedProductId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("StyleCss");

                    b.Property<string>("Summary");

                    b.Property<string>("Tags");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RelatedProductId");

                    b.HasIndex("UserId");

                    b.ToTable("GeneralPage");
                });

            modelBuilder.Entity("OnlineMarket.Models.GeneralPageModified", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GeneralPageId");

                    b.Property<string>("LastGeneralPageBackupJson");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GeneralPageId");

                    b.HasIndex("UserId");

                    b.ToTable("GeneralPageModified");
                });

            modelBuilder.Entity("OnlineMarket.Models.GuaranteeProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogPath");

                    b.Property<string>("Description");

                    b.Property<byte[]>("Image");

                    b.Property<string>("LatinName");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GuaranteeProvider");
                });

            modelBuilder.Entity("OnlineMarket.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AdditionalPostPriceAmount")
                        .HasColumnType("Money");

                    b.Property<int?>("AdditionalPostPriceId");

                    b.Property<bool>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ApprovedByUserId");

                    b.Property<DateTime?>("ApprovedDateTime");

                    b.Property<int?>("BankAccountId");

                    b.Property<int?>("BankId");

                    b.Property<int?>("BranchId");

                    b.Property<decimal?>("CalculatedPrice")
                        .HasColumnType("Money");

                    b.Property<string>("Comment");

                    b.Property<int?>("CouponId");

                    b.Property<int?>("CouponIndexId");

                    b.Property<string>("CustomerId");

                    b.Property<bool>("Delivered")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("GiftAddress");

                    b.Property<bool>("GiftAvailable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("GiftComment");

                    b.Property<string>("GiftPhoneNumber");

                    b.Property<bool>("GiftWrap")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Guid");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("OnlinePaid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("PaidAtHome")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("RecievedTokenFromBank");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("SellerId");

                    b.Property<bool>("SendAsGift")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("SendDateTime");

                    b.Property<bool>("Sent")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("ShippingMethodId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<decimal?>("Tax")
                        .HasColumnType("Money");

                    b.Property<bool>("TaxIncluded")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("TrackingCode");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalPostPriceId");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("BankId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CouponId");

                    b.HasIndex("CouponIndexId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SellerId");

                    b.HasIndex("ShippingMethodId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("OnlineMarket.Models.InvoiceProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Count");

                    b.Property<int?>("InvoiceId");

                    b.Property<int?>("ProductFeatureId");

                    b.Property<decimal?>("RawPrice")
                        .HasColumnType("Money");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductFeatureId");

                    b.ToTable("InvoiceProduct");
                });

            modelBuilder.Entity("OnlineMarket.Models.LikeAndDislikeReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Reaction");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.Property<int?>("UserProductReviewId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserProductReviewId");

                    b.ToTable("LikeAndDislikeReview");
                });

            modelBuilder.Entity("OnlineMarket.Models.LoginFailure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Browser");

                    b.Property<string>("Comment");

                    b.Property<string>("EnteredPassword");

                    b.Property<string>("EnteredUserName");

                    b.Property<string>("Ip");

                    b.Property<bool>("Mobile");

                    b.Property<string>("Os");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("LoginFailure");
                });

            modelBuilder.Entity("OnlineMarket.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId");

                    b.Property<string>("Field");

                    b.Property<DateTime?>("FoundedDate");

                    b.Property<byte[]>("Image");

                    b.Property<string>("LatinName");

                    b.Property<string>("Name");

                    b.Property<string>("Owner");

                    b.Property<DateTime?>("RegDateTime");

                    b.Property<bool>("Status");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("UserId");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("OnlineMarket.Models.ManufacturerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int?>("CityId");

                    b.Property<string>("Fax");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Phone");

                    b.Property<int?>("ProvinceId");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId");

                    b.ToTable("ManufacturerAddress");
                });

            modelBuilder.Entity("OnlineMarket.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<byte[]>("Icon");

                    b.Property<string>("IconPath");

                    b.Property<string>("LatinName");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("OnlineMarket.Models.PagesList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GeneralPagesId");

                    b.Property<string>("LatinName");

                    b.Property<string>("Link");

                    b.Property<string>("Name");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("GeneralPagesId");

                    b.ToTable("PagesList");
                });

            modelBuilder.Entity("OnlineMarket.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Accepted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("BankId");

                    b.Property<int>("InvoiceId");

                    b.Property<DateTime?>("PaidDateTime");

                    b.Property<DateTime>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("TokenKey");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("Money");

                    b.Property<string>("TrackingCode");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("OnlineMarket.Models.PhotoGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image");

                    b.Property<string>("ImagePath");

                    b.Property<string>("LatinName");

                    b.Property<string>("Link");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("RelatedProductId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int?>("SubjectId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("PhotoGallery");
                });

            modelBuilder.Entity("OnlineMarket.Models.PostPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Distance");

                    b.Property<DateTime?>("ExpireDateTime");

                    b.Property<bool>("Extended");

                    b.Property<decimal?>("Price")
                        .HasColumnType("Money");

                    b.Property<double?>("Ratio");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("ShippingMethodId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Unit");

                    b.Property<int?>("WarehouseId");

                    b.Property<double?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("ShippingMethodId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("PostPrice");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductAbstract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ApprovedByUserId");

                    b.Property<DateTime?>("ApprovedDateTime");

                    b.Property<decimal?>("BasePrice")
                        .HasColumnType("Money");

                    b.Property<int?>("BaseSize");

                    b.Property<int?>("BrandId");

                    b.Property<int?>("CategoryId");

                    b.Property<bool>("ContentAvailable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CreatedDateTime");

                    b.Property<string>("Dimensions");

                    b.Property<string>("LatinName");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name");

                    b.Property<double?>("Rank");

                    b.Property<DateTime>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int?>("TolerancQuantity");

                    b.Property<int?>("TotalVisit");

                    b.Property<string>("UserId");

                    b.Property<double?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductAbstract");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductAdditionalFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdditionalFeaturesId");

                    b.Property<string>("LatinTitle");

                    b.Property<int>("ProductFeatureId");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalFeaturesId");

                    b.HasIndex("ProductFeatureId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductAdditionalFeatures");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionHtml");

                    b.Property<string>("DescriptionStyle");

                    b.Property<string>("FeatureHtml");

                    b.Property<string>("FeatureStyle");

                    b.Property<string>("LatinDescriptionHtml");

                    b.Property<string>("LatinSummaryHtml");

                    b.Property<int>("ProductAbstractId");

                    b.Property<DateTime>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("SummaryHtml");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductAbstractId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductDescription");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("AdditionalFeaturesId");

                    b.Property<bool>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ApprovedByUserId");

                    b.Property<DateTime?>("ApprovedDateTime");

                    b.Property<int?>("ColorId");

                    b.Property<int?>("Count");

                    b.Property<bool>("ForSale");

                    b.Property<int?>("MaterialId");

                    b.Property<int?>("MaximumForSale");

                    b.Property<int?>("MinForWholeSale");

                    b.Property<int?>("MinimumForSale");

                    b.Property<bool>("Original")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("ProductAbstractId");

                    b.Property<int?>("ProductCode");

                    b.Property<int?>("ProductCodeNavigationId");

                    b.Property<long?>("ProductFeatureCode");

                    b.Property<DateTime>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("SellerId");

                    b.Property<int?>("SizeId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int?>("TextureId");

                    b.Property<int?>("TotalCount");

                    b.Property<string>("UserId");

                    b.Property<int?>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalFeaturesId");

                    b.HasIndex("ColorId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductAbstractId");

                    b.HasIndex("ProductCodeNavigationId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SizeId");

                    b.HasIndex("TextureId");

                    b.HasIndex("UserId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductFeature");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductFeatureModifed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LastRecordBackupJson");

                    b.Property<string>("ModifedByUserId");

                    b.Property<DateTime?>("ModifedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("ProductFeatureId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("ModifedByUserId");

                    b.HasIndex("ProductFeatureId");

                    b.ToTable("ProductFeatureModifed");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductGuarantee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<decimal?>("ExtraMoney")
                        .HasColumnType("Money");

                    b.Property<int?>("GuaranteeProviderId");

                    b.Property<string>("GuaranteeType");

                    b.Property<string>("Policy");

                    b.Property<int?>("ProductId");

                    b.Property<string>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Term");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GuaranteeProviderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductGuarantee");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("BigImage");

                    b.Property<string>("BigImagePath");

                    b.Property<bool>("Compressed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("DimensionSize");

                    b.Property<bool>("GrayScale")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<byte[]>("Image");

                    b.Property<string>("ImageFormat");

                    b.Property<string>("ImagePath");

                    b.Property<byte[]>("ImageThumbnail");

                    b.Property<string>("ImageThumbnailPath");

                    b.Property<byte[]>("ImageTinyThumbnail");

                    b.Property<string>("ImageTinyThumbnailPath");

                    b.Property<bool>("IsMainImage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.Property<string>("VolumeSize");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductModified", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("LastProductBackupJson");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("ProductId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductModified");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoSync")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<decimal?>("BasedOnCurrencyPrice")
                        .HasColumnType("Money");

                    b.Property<bool>("BasedOnForeignCurrency")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("CurrencyId");

                    b.Property<decimal?>("PriceLevelFive")
                        .HasColumnType("Money");

                    b.Property<decimal?>("PriceLevelFour")
                        .HasColumnType("Money");

                    b.Property<decimal?>("PriceLevelOne")
                        .HasColumnType("Money");

                    b.Property<decimal?>("PriceLevelThree")
                        .HasColumnType("Money");

                    b.Property<decimal?>("PriceLevelTwo")
                        .HasColumnType("Money");

                    b.Property<int>("ProductId");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductSold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Count");

                    b.Property<int?>("ProductAbstractId");

                    b.Property<int?>("ProductFeatureCode");

                    b.Property<int?>("ProductFeatureId");

                    b.HasKey("Id");

                    b.HasIndex("ProductAbstractId");

                    b.HasIndex("ProductFeatureId");

                    b.ToTable("ProductSold");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTag");
                });

            modelBuilder.Entity("OnlineMarket.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CallingCode");

                    b.Property<string>("Capital");

                    b.Property<string>("Coordinates");

                    b.Property<int?>("CountryId");

                    b.Property<byte[]>("Flag");

                    b.Property<string>("Language");

                    b.Property<string>("LatinName");

                    b.Property<byte[]>("Map");

                    b.Property<string>("Name");

                    b.Property<float?>("Population");

                    b.Property<string>("RangeIp");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("OnlineMarket.Models.ScreenResulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dimensions")
                        .IsRequired();

                    b.Property<string>("LatinName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("ScreenResulation");
                });

            modelBuilder.Entity("OnlineMarket.Models.SearchFilters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AliasName");

                    b.Property<string>("Comment");

                    b.Property<string>("LatinName");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SearchFilters");
                });

            modelBuilder.Entity("OnlineMarket.Models.SearchFiltersOnCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("SearchFiltersId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SearchFiltersId");

                    b.ToTable("SearchFiltersOnCategory");
                });

            modelBuilder.Entity("OnlineMarket.Models.SearchedItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("SearchedText");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int?>("UserLogId");

                    b.HasKey("Id");

                    b.HasIndex("UserLogId");

                    b.ToTable("SearchedItems");
                });

            modelBuilder.Entity("OnlineMarket.Models.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<bool>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("BankAccountId");

                    b.Property<int?>("CityId");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("MobilePhone");

                    b.Property<bool>("Pending")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Phone");

                    b.Property<DateTime>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Seller");
                });

            modelBuilder.Entity("OnlineMarket.Models.SellerDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<byte[]>("DocumentFile");

                    b.Property<string>("DocumentPath");

                    b.Property<DateTime>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("SellerId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("SellerDocuments");
                });

            modelBuilder.Entity("OnlineMarket.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminEmail");

                    b.Property<string>("AdminEmailPassword");

                    b.Property<int?>("BaseCurrencyId");

                    b.Property<string>("EmailPort");

                    b.Property<string>("EmailProtocol");

                    b.Property<string>("EmailServiceProvider");

                    b.Property<bool>("IsMarketPlace")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsStatusActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("SMSApiAddress");

                    b.Property<string>("SMSPassword");

                    b.Property<string>("SMSUsername");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("OnlineMarket.Models.ShippingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowChangeCity");

                    b.Property<bool?>("AllowChangeCountry");

                    b.Property<bool?>("AllowChangeProvince");

                    b.Property<bool?>("AllowForGuest");

                    b.Property<string>("Description");

                    b.Property<decimal?>("DynamicPrice")
                        .HasColumnType("Money");

                    b.Property<string>("LatinName");

                    b.Property<string>("Name");

                    b.Property<bool>("OnlyPartner");

                    b.Property<string>("Policy");

                    b.Property<decimal?>("Price")
                        .HasColumnType("Money");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingMethod");
                });

            modelBuilder.Entity("OnlineMarket.Models.SiteGeneralInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AchievedAwards");

                    b.Property<string>("AddressesList");

                    b.Property<string>("BusinessEmail");

                    b.Property<string>("CanonicalTag");

                    b.Property<string>("CanonicalTagDescription");

                    b.Property<string>("ConnectedLinks");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionForFooter");

                    b.Property<string>("LatinShopTitle");

                    b.Property<string>("LicensesListName");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaTagJson");

                    b.Property<string>("Motto");

                    b.Property<string>("PhoneNumbersList");

                    b.Property<byte[]>("PrimarySiteLogo");

                    b.Property<string>("PrimarySiteLogoPath");

                    b.Property<string>("PublicEmail");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<byte[]>("SecondarySiteLogo");

                    b.Property<string>("SecondarySiteLogoPath");

                    b.Property<bool>("SetForMainPage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("ShopTitle");

                    b.Property<string>("Signature");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Summary");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SiteGeneralInfo");
                });

            modelBuilder.Entity("OnlineMarket.Models.Sizes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Size");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("OnlineMarket.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("LatinName");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("OnlineMarket.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int?>("CouponId");

                    b.Property<bool>("Deadline")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EndDateTime");

                    b.Property<string>("LatinTitle");

                    b.Property<int?>("Priority");

                    b.Property<DateTime>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("StartDateTime");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("OnlineMarket.Models.Texture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<byte[]>("Image");

                    b.Property<string>("ImagePath");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("TextureLatinName");

                    b.Property<string>("TextureName");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Texture");
                });

            modelBuilder.Entity("OnlineMarket.Models.TopSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("AltName");

                    b.Property<string>("ButtonContent");

                    b.Property<string>("ButtonLink");

                    b.Property<double?>("ByteSize");

                    b.Property<int?>("ConnectedBrandId");

                    b.Property<int?>("ConnectedCategoryId");

                    b.Property<int?>("ConnectedProductId");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExpireDateTime");

                    b.Property<bool>("HasButton")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<double?>("Height");

                    b.Property<byte[]>("Image");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Link");

                    b.Property<int?>("Priotity");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("ScreenResulationId");

                    b.Property<bool>("SetForFuture")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ShowDateTime");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Summery");

                    b.Property<string>("ThumbnailImagePath");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.Property<double?>("Width");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedBrandId");

                    b.HasIndex("ConnectedCategoryId");

                    b.HasIndex("ConnectedProductId");

                    b.HasIndex("ScreenResulationId");

                    b.HasIndex("UserId");

                    b.ToTable("TopSlider");
                });

            modelBuilder.Entity("OnlineMarket.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LatinName");

                    b.Property<string>("Name");

                    b.Property<bool?>("Status");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserArticleReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnonymousUserEmail");

                    b.Property<string>("AnonymousUserIp");

                    b.Property<bool>("Approved");

                    b.Property<string>("ApprovedByUserId");

                    b.Property<DateTime?>("ApprovedDateTime");

                    b.Property<int>("ArticleId");

                    b.Property<string>("Comment");

                    b.Property<bool?>("Fake");

                    b.Property<DateTime?>("FakeDateTime");

                    b.Property<string>("FakeUserName");

                    b.Property<bool>("OpenComment");

                    b.Property<int?>("ParentId");

                    b.Property<DateTime?>("RegDateTime");

                    b.Property<bool>("Status");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserArticleReview");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserBehaviorTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MouseOrTouchBehavior");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int?>("UserLogId");

                    b.HasKey("Id");

                    b.HasIndex("UserLogId");

                    b.ToTable("UserBehaviorTracking");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserCategoryVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Ip");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.Property<DateTime?>("VisitedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCategoryVisit");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserFavoriteProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavoriteProduct");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption");

                    b.Property<string>("Comment");

                    b.Property<byte[]>("Image");

                    b.Property<byte[]>("ImageThumbnail");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserImage");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<string>("Browser");

                    b.Property<string>("Ip");

                    b.Property<DateTime?>("LogDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<TimeSpan?>("LogTime");

                    b.Property<bool>("MobileOs");

                    b.Property<TimeSpan?>("SpentTime");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLog");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserModified", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("LastUserBackupJson");

                    b.Property<string>("ModifedByUserId");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ModifedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserModified");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnonymousUserEmail");

                    b.Property<string>("AnonymousUserIp");

                    b.Property<bool>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ApprovedByUserId");

                    b.Property<DateTime?>("ApprovedDateTime");

                    b.Property<string>("Comment");

                    b.Property<int?>("Disliked");

                    b.Property<bool?>("Fake")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("FakeDateTime");

                    b.Property<string>("FakeUserName");

                    b.Property<int?>("Liked");

                    b.Property<bool>("OpenComment")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ProductId");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProductReview");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserProductVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ip");

                    b.Property<int?>("ProductId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.Property<DateTime>("VisitDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProductVisit");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserReported", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Determination");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Report");

                    b.Property<string>("ReportedByUserId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReportedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserReported");
                });

            modelBuilder.Entity("OnlineMarket.Models.VerificationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AutoGenerate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("EndDateTime");

                    b.Property<string>("GeneratedCode");

                    b.Property<string>("ReasonOfGenerate");

                    b.Property<DateTime?>("RegDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool?>("RequestedByAdmin")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("SendToEmail");

                    b.Property<bool?>("SendToPhoneNumber");

                    b.Property<DateTime?>("StartDateTime");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationCode");
                });

            modelBuilder.Entity("OnlineMarket.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int?>("BranchId");

                    b.Property<string>("Fax");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("DefinedByUserId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<int?>("Gendre");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NationalCode");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("Rank");

                    b.Property<DateTime>("RegisteredDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("SpecialUser")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DefinedByUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineMarket.Models.AdditionalFeatures", b =>
                {
                    b.HasOne("OnlineMarket.Models.AdditionalFeatures", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("AdditionalFeatures")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Address", b =>
                {
                    b.HasOne("OnlineMarket.Models.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId");

                    b.HasOne("OnlineMarket.Models.Province", "Province")
                        .WithMany("Address")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Address")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.AdminMenu", b =>
                {
                    b.HasOne("OnlineMarket.Models.AdminMenu", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("AdminMenu")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Article", b =>
                {
                    b.HasOne("OnlineMarket.Models.PhotoGallery", "RelatedPhotoGallery")
                        .WithMany("Article")
                        .HasForeignKey("RelatedPhotoGalleryId");

                    b.HasOne("OnlineMarket.Models.ProductAbstract", "RelatedProduct")
                        .WithMany("Article")
                        .HasForeignKey("RelatedProductId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Article")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ArticleModified", b =>
                {
                    b.HasOne("OnlineMarket.Models.Article", "Article")
                        .WithMany("ArticleModified")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("ArticleModified")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.BankAccount", b =>
                {
                    b.HasOne("OnlineMarket.Models.Bank", "Bank")
                        .WithMany("BankAccount")
                        .HasForeignKey("BankId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Banner", b =>
                {
                    b.HasOne("OnlineMarket.Models.Brand", "ConnectedBrand")
                        .WithMany("Banner")
                        .HasForeignKey("ConnectedBrandId");

                    b.HasOne("OnlineMarket.Models.Category", "ConnectedCategory")
                        .WithMany("Banner")
                        .HasForeignKey("ConnectedCategoryId");

                    b.HasOne("OnlineMarket.Models.ProductAbstract", "ConnectedProduct")
                        .WithMany("Banner")
                        .HasForeignKey("ConnectedProductId");

                    b.HasOne("OnlineMarket.Models.PagesList", "ShowInPage")
                        .WithMany("Banner")
                        .HasForeignKey("ShowInPageId");

                    b.HasOne("OnlineMarket.Models.Type", "Type")
                        .WithMany("Banner")
                        .HasForeignKey("TypeId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Banner")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.BlockedUser", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "ByUser")
                        .WithMany("BlockedUser")
                        .HasForeignKey("ByUserId");

                    b.HasOne("OnlineMarket.Models.LoginFailure", "LoginFailure")
                        .WithMany("BlockedUser")
                        .HasForeignKey("LoginFailureId");

                    b.HasOne("OnlineMarket.Models.UserLog", "UserLog")
                        .WithMany("BlockedUser")
                        .HasForeignKey("UserLogId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Branch", b =>
                {
                    b.HasOne("OnlineMarket.Models.City", "City")
                        .WithMany("Branch")
                        .HasForeignKey("CityId");

                    b.HasOne("OnlineMarket.Models.Seller", "Seller")
                        .WithMany("Branch")
                        .HasForeignKey("SellerId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Branch")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Brand", b =>
                {
                    b.HasOne("OnlineMarket.Models.Country", "Country")
                        .WithMany("Brand")
                        .HasForeignKey("CountryId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.BrandModified", b =>
                {
                    b.HasOne("OnlineMarket.Models.Brand", "Brand")
                        .WithMany("BrandModified")
                        .HasForeignKey("BrandId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("BrandModified")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Category", b =>
                {
                    b.HasOne("OnlineMarket.Models.Field", "Field")
                        .WithMany("Category")
                        .HasForeignKey("FieldId");

                    b.HasOne("OnlineMarket.Models.Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Category")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.City", b =>
                {
                    b.HasOne("OnlineMarket.Models.Province", "Province")
                        .WithMany("City")
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ContactUs", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "ApprovedByUser")
                        .WithMany("ContactUsApprovedByUser")
                        .HasForeignKey("ApprovedByUserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Country", b =>
                {
                    b.HasOne("OnlineMarket.Models.Continent", "Continent")
                        .WithMany("Country")
                        .HasForeignKey("ContinentId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Coupon", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "ApprovedByUser")
                        .WithMany("CouponApprovedByUser")
                        .HasForeignKey("ApprovedByUserId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "SpecialUser")
                        .WithMany("CouponSpecialUser")
                        .HasForeignKey("SpecialUserId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("CouponUser")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.CouponIndex", b =>
                {
                    b.HasOne("OnlineMarket.Models.Coupon", "Coupon")
                        .WithMany("CouponIndex")
                        .HasForeignKey("CouponId");

                    b.HasOne("OnlineMarket.Models.ProductFeature", "Product")
                        .WithMany("CouponIndex")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Field", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Field")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.GeneralPage", b =>
                {
                    b.HasOne("OnlineMarket.Models.ProductAbstract", "RelatedProduct")
                        .WithMany("GeneralPage")
                        .HasForeignKey("RelatedProductId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("GeneralPage")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.GeneralPageModified", b =>
                {
                    b.HasOne("OnlineMarket.Models.GeneralPage", "GeneralPage")
                        .WithMany("GeneralPageModified")
                        .HasForeignKey("GeneralPageId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("GeneralPageModified")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.GuaranteeProvider", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("GuaranteeProvider")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Invoice", b =>
                {
                    b.HasOne("OnlineMarket.Models.PostPrice", "AdditionalPostPrice")
                        .WithMany("Invoice")
                        .HasForeignKey("AdditionalPostPriceId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "ApprovedByUser")
                        .WithMany("InvoiceApprovedByUser")
                        .HasForeignKey("ApprovedByUserId");

                    b.HasOne("OnlineMarket.Models.BankAccount", "BankAccount")
                        .WithMany("Invoice")
                        .HasForeignKey("BankAccountId");

                    b.HasOne("OnlineMarket.Models.Bank", "Bank")
                        .WithMany("Invoice")
                        .HasForeignKey("BankId");

                    b.HasOne("OnlineMarket.Models.Branch", "Branch")
                        .WithMany("Invoice")
                        .HasForeignKey("BranchId");

                    b.HasOne("OnlineMarket.Models.Coupon", "Coupon")
                        .WithMany("Invoice")
                        .HasForeignKey("CouponId");

                    b.HasOne("OnlineMarket.Models.CouponIndex", "CouponIndex")
                        .WithMany("Invoice")
                        .HasForeignKey("CouponIndexId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "Customer")
                        .WithMany("InvoiceCustomer")
                        .HasForeignKey("CustomerId");

                    b.HasOne("OnlineMarket.Models.Seller", "Seller")
                        .WithMany("Invoice")
                        .HasForeignKey("SellerId");

                    b.HasOne("OnlineMarket.Models.ShippingMethod", "ShippingMethod")
                        .WithMany("Invoice")
                        .HasForeignKey("ShippingMethodId");
                });

            modelBuilder.Entity("OnlineMarket.Models.InvoiceProduct", b =>
                {
                    b.HasOne("OnlineMarket.Models.Invoice", "Invoice")
                        .WithMany("InvoiceProduct")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("OnlineMarket.Models.ProductFeature", "ProductFeature")
                        .WithMany("InvoiceProduct")
                        .HasForeignKey("ProductFeatureId");
                });

            modelBuilder.Entity("OnlineMarket.Models.LikeAndDislikeReview", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("LikeAndDislikeReview")
                        .HasForeignKey("UserId");

                    b.HasOne("OnlineMarket.Models.UserProductReview", "UserProductReview")
                        .WithMany("LikeAndDislikeReview")
                        .HasForeignKey("UserProductReviewId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Manufacturer", b =>
                {
                    b.HasOne("OnlineMarket.Models.Brand", "Brand")
                        .WithMany("Manufacturer")
                        .HasForeignKey("BrandId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Manufacturer")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ManufacturerAddress", b =>
                {
                    b.HasOne("OnlineMarket.Models.City", "City")
                        .WithMany("ManufacturerAddress")
                        .HasForeignKey("CityId");

                    b.HasOne("OnlineMarket.Models.Manufacturer", "Manufacturer")
                        .WithMany("ManufacturerAddress")
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("OnlineMarket.Models.Province", "Province")
                        .WithMany("ManufacturerAddress")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("ManufacturerAddress")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.PagesList", b =>
                {
                    b.HasOne("OnlineMarket.Models.GeneralPage", "GeneralPages")
                        .WithMany("PagesList")
                        .HasForeignKey("GeneralPagesId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Payment", b =>
                {
                    b.HasOne("OnlineMarket.Models.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineMarket.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineMarket.Models.PhotoGallery", b =>
                {
                    b.HasOne("OnlineMarket.Models.Subject", "Subject")
                        .WithMany("PhotoGallery")
                        .HasForeignKey("SubjectId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("PhotoGallery")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.PostPrice", b =>
                {
                    b.HasOne("OnlineMarket.Models.ShippingMethod", "ShippingMethod")
                        .WithMany("PostPrice")
                        .HasForeignKey("ShippingMethodId");

                    b.HasOne("OnlineMarket.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductAbstract", b =>
                {
                    b.HasOne("OnlineMarket.Models.Brand", "Brand")
                        .WithMany("ProductAbstract")
                        .HasForeignKey("BrandId");

                    b.HasOne("OnlineMarket.Models.Category", "Category")
                        .WithMany("ProductAbstract")
                        .HasForeignKey("CategoryId");

                    b.HasOne("OnlineMarket.Models.Manufacturer", "Manufacturer")
                        .WithMany("ProductAbstract")
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("ProductAbstract")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductAdditionalFeatures", b =>
                {
                    b.HasOne("OnlineMarket.Models.AdditionalFeatures", "AdditionalFeatures")
                        .WithMany("ProductAdditionalFeatures")
                        .HasForeignKey("AdditionalFeaturesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineMarket.Models.ProductFeature", "ProductFeature")
                        .WithMany("ProductAdditionalFeatures")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductDescription", b =>
                {
                    b.HasOne("OnlineMarket.Models.ProductAbstract", "ProductAbstract")
                        .WithMany("ProductDescription")
                        .HasForeignKey("ProductAbstractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("ProductDescription")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductFeature", b =>
                {
                    b.HasOne("OnlineMarket.Models.AdditionalFeatures")
                        .WithMany("ProductFeature")
                        .HasForeignKey("AdditionalFeaturesId");

                    b.HasOne("OnlineMarket.Models.Color", "Color")
                        .WithMany("ProductFeature")
                        .HasForeignKey("ColorId");

                    b.HasOne("OnlineMarket.Models.Material", "Material")
                        .WithMany("ProductFeature")
                        .HasForeignKey("MaterialId");

                    b.HasOne("OnlineMarket.Models.ProductAbstract", "ProductAbstract")
                        .WithMany("ProductFeature")
                        .HasForeignKey("ProductAbstractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineMarket.Models.ProductSold", "ProductCodeNavigation")
                        .WithMany("ProductFeature")
                        .HasForeignKey("ProductCodeNavigationId");

                    b.HasOne("OnlineMarket.Models.Seller", "Seller")
                        .WithMany("ProductFeature")
                        .HasForeignKey("SellerId");

                    b.HasOne("OnlineMarket.Models.Sizes", "Size")
                        .WithMany("ProductFeature")
                        .HasForeignKey("SizeId");

                    b.HasOne("OnlineMarket.Models.Texture", "Texture")
                        .WithMany("ProductFeature")
                        .HasForeignKey("TextureId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("OnlineMarket.Models.Warehouse", "Warehouse")
                        .WithMany("ProductFeature")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductFeatureModifed", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "ModifedByUser")
                        .WithMany("ProductFeatureModifed")
                        .HasForeignKey("ModifedByUserId");

                    b.HasOne("OnlineMarket.Models.ProductFeature", "ProductFeature")
                        .WithMany("ProductFeatureModifed")
                        .HasForeignKey("ProductFeatureId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductGuarantee", b =>
                {
                    b.HasOne("OnlineMarket.Models.GuaranteeProvider", "GuaranteeProvider")
                        .WithMany("ProductGuarantee")
                        .HasForeignKey("GuaranteeProviderId");

                    b.HasOne("OnlineMarket.Models.ProductAbstract", "Product")
                        .WithMany("ProductGuarantee")
                        .HasForeignKey("ProductId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("ProductGuarantee")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductImage", b =>
                {
                    b.HasOne("OnlineMarket.Models.ProductAbstract", "Product")
                        .WithMany("ProductImage")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("ProductImage")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductModified", b =>
                {
                    b.HasOne("OnlineMarket.Models.ProductAbstract", "Product")
                        .WithMany("ProductModified")
                        .HasForeignKey("ProductId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("ProductModified")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductPrice", b =>
                {
                    b.HasOne("OnlineMarket.Models.Currency", "Currency")
                        .WithMany("ProductPrice")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("OnlineMarket.Models.ProductFeature", "Product")
                        .WithMany("ProductPrice")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductSold", b =>
                {
                    b.HasOne("OnlineMarket.Models.ProductAbstract", "ProductAbstract")
                        .WithMany("ProductSold")
                        .HasForeignKey("ProductAbstractId");

                    b.HasOne("OnlineMarket.Models.ProductFeature", "ProductFeatureNavigation")
                        .WithMany("ProductSold")
                        .HasForeignKey("ProductFeatureId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ProductTag", b =>
                {
                    b.HasOne("OnlineMarket.Models.ProductAbstract", "Product")
                        .WithMany("ProductTag")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineMarket.Models.Tag", "Tag")
                        .WithMany("ProductTag")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineMarket.Models.Province", b =>
                {
                    b.HasOne("OnlineMarket.Models.Country", "Country")
                        .WithMany("Province")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("OnlineMarket.Models.SearchFilters", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("SearchFilters")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.SearchFiltersOnCategory", b =>
                {
                    b.HasOne("OnlineMarket.Models.Category", "Category")
                        .WithMany("SearchFiltersOnCategory")
                        .HasForeignKey("CategoryId");

                    b.HasOne("OnlineMarket.Models.SearchFilters", "SearchFilters")
                        .WithMany("SearchFiltersOnCategory")
                        .HasForeignKey("SearchFiltersId");
                });

            modelBuilder.Entity("OnlineMarket.Models.SearchedItems", b =>
                {
                    b.HasOne("OnlineMarket.Models.UserLog", "UserLog")
                        .WithMany("SearchedItems")
                        .HasForeignKey("UserLogId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Seller", b =>
                {
                    b.HasOne("OnlineMarket.Models.BankAccount", "BankAccount")
                        .WithMany("Seller")
                        .HasForeignKey("BankAccountId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Seller")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.SellerDocuments", b =>
                {
                    b.HasOne("OnlineMarket.Models.Seller", "Seller")
                        .WithMany("SellerDocuments")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineMarket.Models.Setting", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Setting")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.ShippingMethod", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.SiteGeneralInfo", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("SiteGeneralInfo")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Subject", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Subject")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Tag", b =>
                {
                    b.HasOne("OnlineMarket.Models.Coupon", "Coupon")
                        .WithMany("Tag")
                        .HasForeignKey("CouponId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Tag")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.TopSlider", b =>
                {
                    b.HasOne("OnlineMarket.Models.Brand", "ConnectedBrand")
                        .WithMany("TopSlider")
                        .HasForeignKey("ConnectedBrandId");

                    b.HasOne("OnlineMarket.Models.Category", "ConnectedCategory")
                        .WithMany("TopSlider")
                        .HasForeignKey("ConnectedCategoryId");

                    b.HasOne("OnlineMarket.Models.ProductAbstract", "ConnectedProduct")
                        .WithMany("TopSlider")
                        .HasForeignKey("ConnectedProductId");

                    b.HasOne("OnlineMarket.Models.ScreenResulation", "ScreenResulation")
                        .WithMany("TopSlider")
                        .HasForeignKey("ScreenResulationId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("TopSlider")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserArticleReview", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "ApprovedByUser")
                        .WithMany("UserArticleReviewApprovedByUser")
                        .HasForeignKey("ApprovedByUserId");

                    b.HasOne("OnlineMarket.Models.Article", "Article")
                        .WithMany("UserArticleReview")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineMarket.Models.UserArticleReview", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("UserArticleReviewUser")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserBehaviorTracking", b =>
                {
                    b.HasOne("OnlineMarket.Models.UserLog", "UserLog")
                        .WithMany("UserBehaviorTracking")
                        .HasForeignKey("UserLogId");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserCategoryVisit", b =>
                {
                    b.HasOne("OnlineMarket.Models.Category", "Category")
                        .WithMany("UserCategoryVisit")
                        .HasForeignKey("CategoryId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("UserCategoryVisit")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserFavoriteProduct", b =>
                {
                    b.HasOne("OnlineMarket.Models.ProductAbstract", "Product")
                        .WithMany("UserFavoriteProduct")
                        .HasForeignKey("ProductId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("UserFavoriteProduct")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserImage", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("UserImage")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserLog", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("UserLog")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserModified", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "ModifedByUser")
                        .WithMany("UserModifiedByUser")
                        .HasForeignKey("ModifedByUserId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("UserModifiedUser")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserProductReview", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "ApprovedByUser")
                        .WithMany("UserProductReviewApprovedByUser")
                        .HasForeignKey("ApprovedByUserId");

                    b.HasOne("OnlineMarket.Models.UserProductReview", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.HasOne("OnlineMarket.Models.ProductAbstract", "Product")
                        .WithMany("UserProductReview")
                        .HasForeignKey("ProductId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("UserProductReviewUser")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserProductVisit", b =>
                {
                    b.HasOne("OnlineMarket.Models.ProductAbstract", "Product")
                        .WithMany("UserProductVisit")
                        .HasForeignKey("ProductId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("UserProductVisit")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.UserReported", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "ReportedByUser")
                        .WithMany("UserReportedReportedByUser")
                        .HasForeignKey("ReportedByUserId");

                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("UserReportedUser")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.VerificationCode", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("VerificationCode")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineMarket.Models.Warehouse", b =>
                {
                    b.HasOne("OnlineMarket.Models.Branch", "Branch")
                        .WithMany("Warehouse")
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.HasOne("OnlineMarketPlace.Areas.Identity.Data.ApplicationUser", "DefinedByUser")
                        .WithMany("InverseDefinedByUser")
                        .HasForeignKey("DefinedByUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
